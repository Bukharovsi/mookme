(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{367:function(t,e,s){"use strict";s.r(e);var a=s(44),o=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"get-started"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#get-started"}},[t._v("#")]),t._v(" Get started")]),t._v(" "),s("h2",{attrs:{id:"installation"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#installation"}},[t._v("#")]),t._v(" Installation")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" @escape.tech/mookme\n")])])]),s("h2",{attrs:{id:"configuration"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#configuration"}},[t._v("#")]),t._v(" Configuration")]),t._v(" "),s("h3",{attrs:{id:"first-configuration"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#first-configuration"}},[t._v("#")]),t._v(" First configuration")]),t._v(" "),s("p",[s("strong",[t._v("Case 1 : You're the first to configure "),s("code",[t._v("Mookme")]),t._v(" on your project")])]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("mookme init\n")])])]),s("p",[t._v("This will display a prompter to let you define "),s("strong",[t._v("where you packages are located")]),t._v(", how you want the hooks to behave when a file is changed during commit hooks, write the corresponding documentation in your "),s("code",[t._v("package.json")]),t._v(", and write your "),s("code",[t._v(".git/hooks")]),t._v(" scripts.")]),t._v(" "),s("p",[t._v("Every step of this process is clearly shown and nothing will be written without asking you if you're okay with it ðŸ˜ƒ")]),t._v(" "),s("h3",{attrs:{id:"already-configured-project"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#already-configured-project"}},[t._v("#")]),t._v(" Already-configured project")]),t._v(" "),s("p",[s("strong",[t._v("Case 2 : Someone in your team already configured "),s("code",[t._v("Mookme")])])]),t._v(" "),s("p",[t._v("This will only write your "),s("code",[t._v(".git/hooks")]),t._v(" scripts.")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("mookme init --only-hooks\n")])])]),s("h2",{attrs:{id:"writing-your-hooks"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#writing-your-hooks"}},[t._v("#")]),t._v(" Writing your hooks")]),t._v(" "),s("h3",{attrs:{id:"global-structure-of-your-project-hooks"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#global-structure-of-your-project-hooks"}},[t._v("#")]),t._v(" Global structure of your project hooks")]),t._v(" "),s("p",[s("code",[t._v("Mookme")]),t._v(" is designed for monorepos, hence it assumes your project has a root folder where global hooks can be defined, and multiple packages where you can define per-package hook.")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("Hook are written in a folder "),s("code",[t._v(".hooks")]),t._v(" located at the root of your project and at the root of you packages' folders.")]),t._v(" "),s("p",[s("strong",[t._v("When using "),s("code",[t._v("Mookme")]),t._v(" in a monorepo, you will have a project structure following this :")])]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("root"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# where your .git is located")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("- .hooks "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# will always be executed when you commit")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("- pre-commit.json "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# will be executed with the pre-commit git hook")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("- commit-msg.json  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# will be executed with the commit-msg git hook")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("- prepare-commit-msg.json\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("- post-commit.json\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("- packages\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("- package A\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("- .hooks "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# will be executed if you commit changes on package A")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("- pre-commit.json \n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("- post-commit.json\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("- package A\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("- .hooks "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# will be executed if you commit changes on package B")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("- pre-commit.json\n")])])])]),t._v(" "),s("p",[t._v("With "),s("code",[t._v("mookme")]),t._v(", your hooks are stored in JSON files called "),s("code",[t._v("{hook-type}.json")]),t._v(" where the hook type is one of the available git hooks, eg :")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("pre-commit")])]),t._v(" "),s("li",[s("code",[t._v("prepare-commit-msg")])]),t._v(" "),s("li",[s("code",[t._v("commit-msg")])]),t._v(" "),s("li",[s("code",[t._v("post-commit")])])]),t._v(" "),s("h3",{attrs:{id:"example-of-hook-file"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#example-of-hook-file"}},[t._v("#")]),t._v(" Example of hook file")]),t._v(" "),s("p",[t._v("Your hooks are defined in simple json files.")]),t._v(" "),s("ul",[s("li",[t._v("For complete reference, see the JSON hooks reference")]),t._v(" "),s("li",[t._v("For specific hook examples, see the recipes.")])]),t._v(" "),s("p",[t._v("A hook defines a list of "),s("code",[t._v("steps")]),t._v(", which are basically commands to run, with a name for proper display. A few configuration option are available, but the minimal requirement is "),s("code",[t._v("name")]),t._v(" and "),s("code",[t._v("command")]),t._v(".")]),t._v(" "),s("p",[t._v("Here is an example that will run your commit message using "),s("code",[t._v("commitlint")]),t._v(".")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("# commit"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("msg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("json\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"steps"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"commit lint"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"command"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"cat {args} | ./node_modules/@commitlint/cli/cli.js"')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("When writing package-scoped hooks, the current working directory assumed by "),s("code",[t._v("Mookme")]),t._v(" is the folder where this package's "),s("code",[t._v(".hooks'")]),t._v(" folder is located")])]),t._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),s("p",[t._v("{args}` are replaced with the hook arguments when the command is executed. See "),s("a",{attrs:{href:"https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks",target:"_blank",rel:"noopener noreferrer"}},[t._v("the  git documentation on hooks"),s("OutboundLink")],1)])]),t._v(" "),s("p",[s("strong",[t._v("More examples to "),s("RouterLink",{attrs:{to:"/get-started/docs/hooks-examples/"}},[t._v("get you started !")])],1)])])}),[],!1,null,null,null);e.default=o.exports}}]);