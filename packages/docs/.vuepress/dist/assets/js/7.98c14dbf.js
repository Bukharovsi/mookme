(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{365:function(e,o,t){"use strict";t.r(o);var a=t(44),s=Object(a.a)({},(function(){var e=this,o=e.$createElement,t=e._self._c||o;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"welcome-on-mookme"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#welcome-on-mookme"}},[e._v("#")]),e._v(" Welcome on Mookme")]),e._v(" "),t("p",[t("em",[e._v("A simple and easy-to-use, yet powerful and language agnostic git hook for monorepos.")])]),e._v(" "),t("img",{attrs:{src:"banner.png",alt:"banner"}}),e._v(" "),t("h2",{attrs:{id:"what-is-mookme"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#what-is-mookme"}},[e._v("#")]),e._v(" What is Mookme ?")]),e._v(" "),t("p",[e._v("Mookme is a git hook manager. It's sole purpose is to execute some scripts when you want to commit. It could be a linter, tests, your favorite commit message checker.")]),e._v(" "),t("p",[t("strong",[e._v("Everything that is invoked through a cli can be used with mookme !")])]),e._v(" "),t("p",[e._v("Despite being a very young project, it is ready to use, even if it remains a beta under active development.")]),e._v(" "),t("p",[e._v("You are welcome to use it and enjoy it's simplicity.\n"),t("strong",[e._v("If you encounter any bug or weird behavior, don't be afraid to open an issue ðŸ˜ƒ")])]),e._v(" "),t("img",{attrs:{src:"demo.gif",alt:"A fresh look at your new git hooks ;)",width:"600"}}),e._v(" "),t("h2",{attrs:{id:"how-does-it-work"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#how-does-it-work"}},[e._v("#")]),e._v(" How does it work ?")]),e._v(" "),t("ul",[t("li",[e._v("You initialize a tiny bit of configuration, essentially describing the structure of your monorepo, especially :\n"),t("ul",[t("li",[e._v("What is the root folder where the packages of the repo are stored")]),e._v(" "),t("li",[e._v("What are the paths to these packages.")])])])]),e._v(" "),t("p",[t("strong",[e._v("Don't worry")]),e._v(", we provide a CLI tool let you easily enter this configuration: Just run "),t("code",[e._v("mookme init")])]),e._v(" "),t("ul",[t("li",[e._v("You write your hooks in json files (see writing hooks)")]),e._v(" "),t("li",[e._v("You do your stuff & commit, "),t("code",[e._v("Mookme")]),e._v(" will evaluate which packages have staged changes, and will run hooks defined in the folder "),t("code",[e._v(".hooks")]),e._v(" of these folders.")])]),e._v(" "),t("h2",{attrs:{id:"why-not"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#why-not"}},[e._v("#")]),e._v(" Why not ... ?")]),e._v(" "),t("h3",{attrs:{id:"bash-scripts"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#bash-scripts"}},[e._v("#")]),e._v(" "),t("code",[e._v("bash")]),e._v(" scripts")]),e._v(" "),t("p",[t("strong",[t("code",[e._v("bash")]),e._v(" scripts directly written in my "),t("code",[e._v(".git/hooks")]),e._v(" folder")])]),e._v(" "),t("ul",[t("li",[e._v("Even if it is true that, in the end, "),t("code",[e._v("Mookme")]),e._v(" will do nothing more than invoking commands the exact same way a bash script would, the "),t("code",[e._v(".git/hooks")]),e._v(" folder is a not a versioned one, "),t("em",[e._v("hence it will prevent you from sharing configuration")]),e._v(".")]),e._v(" "),t("li",[t("code",[e._v("Mookme")]),e._v(" provides you with a way to version these hooks, and to share repository configuration among the rest of your team.")]),e._v(" "),t("li",[e._v("The hook setup is a one liner for the new developers landing in your team. It won't download anything, just write a small line in your "),t("code",[e._v(".git/hooks")]),e._v(" files")])]),e._v(" "),t("h3",{attrs:{id:"pre-commit"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#pre-commit"}},[e._v("#")]),e._v(" "),t("code",[e._v("pre-commit")])]),e._v(" "),t("p",[t("em",[e._v("(our tool before developing "),t("code",[e._v("Mookme")]),e._v(")")])]),e._v(" "),t("p",[e._v("We had several issues with pre-commit, that led us to develop our own tool :")]),e._v(" "),t("ul",[t("li",[e._v("pre-commit is not designed for monorepos, hence most of the hook are some sort of hacks")]),e._v(" "),t("li",[e._v("per-package environment were not easy to manage, because pre-commit has it's own global environment and we have to create global dependency to run a particular hook for one package.")])]),e._v(" "),t("div",{staticClass:"custom-block warning"},[t("p",{staticClass:"custom-block-title"},[e._v("WARNING")]),e._v(" "),t("p",[e._v("This led us to one of the guideline used by "),t("code",[e._v("Mookme")]),e._v(" to work :\nIf we run a hook on a package in your monorepo:")]),e._v(" "),t("ul",[t("li",[e._v("it means that you have changes in the folder of this package")]),e._v(" "),t("li",[e._v("it means that you developed something on this package")]),e._v(" "),t("li",[e._v("it means that the dev environment of this package is okay")]),e._v(" "),t("li",[e._v("it means we can invoke your test/lint commands "),t("strong",[e._v("as they are provided")]),e._v(" without worrying about an environment properly setup")])])])])}),[],!1,null,null,null);o.default=s.exports}}]);